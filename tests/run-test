#!/usr/bin/python

import optparse
import os
import subprocess
import sys

class CURL:
  def __init__(self, path):
    pass

  def run_test(self, url):
    print url + ":",
    self._process = subprocess.Popen(['curl', '-L', '--silent', '-c', '/dev/null', url],
                               stdin=subprocess.PIPE,
                               stdout=subprocess.PIPE,
                               stderr=subprocess.STDOUT)
    self._process.wait()
    self._consume_output()
    self._process = None

  def _consume_output(self):
    print self._process.stdout.read().strip()

class Safari:
  def __init__(self, path):
    if not path:
      print 'Safari requies the path to DumpRenderTree.'
      exit(1)
    self._path = path

  def run_test(self, url):
    print url + ":",
    self._process = subprocess.Popen([self._path, url],
                               stdin=subprocess.PIPE,
                               stdout=subprocess.PIPE,
                               stderr=subprocess.STDOUT)
    self._process.wait()
    self._consume_output()
    self._process = None

  def _consume_output(self):
    # Ignore the first line, which contains the Content-Type.
    line = self._process.stdout.readline()
    assert(line.startswith('Content-Type'))
    line = self._process.stdout.readline()
    while line.rstrip() != '#EOF':
      if line.strip() != '':
        print line.rstrip()
      line = self._process.stdout.readline()

class Chromium:
  def __init__(self, path):
    if not path:
      print 'Chromium requies the path to test_shell.'
      exit(1)
    self._path = path

  def run_test(self, url):
    print url + ":",
    self._start()
    self._process.stdin.write(url + '\n')
    self._process.stdin.flush()
    self._consume_output()
    self._stop()

  def _start(self):
    """Start the test shell process."""
    self._process = subprocess.Popen([self._path, '--layout-tests'],
                                     stdin=subprocess.PIPE,
                                     stdout=subprocess.PIPE,
                                     stderr=subprocess.STDOUT)

  def _stop(self):
    """Kill the test shell process."""
    if not self._process:
      return
    self._process.stdin.close()
    self._process.stdout.close()
    if self._process.stderr:
      self._test_shell_proc.stderr.close()
    if sys.platform not in ('win32', 'cygwin'):
      subprocess.Popen(['kill', '-9', str(self._process.pid)])
    self._process = None

  def _consume_output(self):
    """Read and print the output from test shell."""
    line = self._process.stdout.readline()
    while line.rstrip() != '#EOF':
      if not line.startswith('#URL:') and line.strip() != '':
        print line.rstrip()
      line = self._process.stdout.readline()

class TestServer:
  def start(self):
    self._process = subprocess.Popen(['./run-test-server'],
                                     stdin=subprocess.PIPE,
                                     stdout=open(os.devnull, 'w'),
                                     stderr=subprocess.STDOUT)
    #TODO: We need to wait for the server to come up.

  def stop(self):
    if not self._process:
      return
    kill_process = subprocess.Popen(['curl', '--silent', 'http://localhost:8888/kill'],
                                    stdin=subprocess.PIPE,
                                    stdout=open(os.devnull, 'w'),
                                    stderr=subprocess.STDOUT)
    kill_process.wait()
    self._process = None

def feed_tests_to_tool(tests, tool):
  for test in tests:
    if test:
      tool.run_test(test)

def create_tool(tool, path):
  known_tools = {
    'curl': CURL,
    'safari': Safari,
    'chromium': Chromium
  }
  if tool not in known_tools.keys():
    if tool:
      print 'Unknown tool "' + tool + '"'
    print 'The known tools are:\n * ' + '\n * '.join(known_tools.keys())
    exit(1)

  tool_factory = known_tools[tool]
  return tool_factory(path)

def all_tests():
  process = subprocess.Popen('./list-test-urls',
                             shell=True,
                             stdin=subprocess.PIPE,
                             stdout=subprocess.PIPE,
                             stderr=subprocess.STDOUT)
  test_list = process.communicate()
  process.wait()
  return test_list[0].splitlines()

def main(options, args):
  if options.all:
    tests = all_tests()
  else:
    if len(args) < 1:
      print 'Please specify a test to run.'
      exit(1)
    tests = [args[0]]
  server = TestServer()
  server.start()
  feed_tests_to_tool(tests, create_tool(options.tool, options.path))
  server.stop()

def options():
  option_parser = optparse.OptionParser()
  option_parser.add_option("", "--tool",
                           help="Which implementation to tests.")
  option_parser.add_option("", "--path", default=None,
                           help="Where to find the implementation.")
  option_parser.add_option("", "--all", default=False, action="store_true",
                           help="Run all the tests.")
  return option_parser

if __name__ == "__main__":
  options, args = options().parse_args()
  main(options, args)
