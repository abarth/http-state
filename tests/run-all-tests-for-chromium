#!/usr/bin/python

import subprocess
import sys

class TestShell:
  def __init__(self, path):
    self._path = path

  def run_test(self, url):
    print url + ":",
    self._start()
    self._process.stdin.write(url + '\n')
    self._process.stdin.flush()
    self._consume_output()
    self._stop()

  def _start(self):
    """Start the test shell process."""
    self._process = subprocess.Popen([self._path, '--layout-tests'],
                                     stdin=subprocess.PIPE,
                                     stdout=subprocess.PIPE,
                                     stderr=subprocess.STDOUT)

  def _stop(self):
    """Kill the test shell process."""
    if not self._process:
      return
    self._process.stdin.close()
    self._process.stdout.close()
    if self._process.stderr:
      self._test_shell_proc.stderr.close()
    if sys.platform not in ('win32', 'cygwin'):
      subprocess.Popen(['kill', '-9', str(self._process.pid)])
    self._process = None

  def _consume_output(self):
    """Read and print the output from test shell."""
    line = self._process.stdout.readline()
    while line.rstrip() != '#EOF':
      if not line.startswith('#URL:') and line.strip() != '':
        print line.rstrip()
      line = self._process.stdout.readline()

def start_list_test_urls():
  return subprocess.Popen('./list-test-urls',
                          shell=True,
                          stdin=subprocess.PIPE,
                          stdout=subprocess.PIPE,
                          stderr=subprocess.STDOUT)

def get_tests():
  process = start_list_test_urls()
  tests = process.communicate()
  process.wait()
  return tests[0].splitlines()

def feed_tests_to_test_shell(tests, test_shell):
  for test in tests:
    if test:
      test_shell.run_test(test)

def main(test_shell_path):
  tests = get_tests()
  test_shell = TestShell(test_shell_path)
  feed_tests_to_test_shell(tests, test_shell)

def usage():
  print "Usage: run_all_tests_for_chromium <test_shell>"
  print "       <test_shell> = path to Chromium's test_shell executable"

if __name__ == "__main__":
  if len(sys.argv) < 2:
    usage()
    sys.exit(0)
  test_shell_path = sys.argv[1]
  main(test_shell_path)
