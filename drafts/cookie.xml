<?xml version="1.0"?>
<?rfc toc="yes"?>
<?xml-stylesheet type="text/xml" href="rfc2629.xslt"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<rfc ipr="trust200902" docName="draft-abarth-cookie">
  <front>
    <title abbrev="HTTP State Management Mechanism">
      HTTP State Management Mechanism
    </title>
    <author initials="A." surname="Barth" fullname="Adam Barth">
      <organization abbrev="U.C. Berkeley">
        University of California, Berkeley
      </organization>
      <address>
        <email>abarth@eecs.berkeley.edu</email>
        <uri>http://www.adambarth.com/</uri>
      </address>
    </author>
    <date month="August" year="2009"/>
    <workgroup>http-state Working Group</workgroup>
    <keyword>Internet-Draft</keyword>
    <abstract>
      <t>This document defines the HTTP Cookie and Set-Cookie headers.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="intro" title="Introduction">
      <t>This document defines the HTTP Cookie and Set-Cookie header.</t>
    </section>
    <section title="Terminology">
      <t>The terms user agent, client, server, proxy, and origin server have
      the same meaning as in the HTTP/1.0 specification.</t>

      <t>Fully-qualified host name (FQHN) means either the fully-qualified
      domain name (FQDN) of a host (i.e., a completely specified domain name
      ending in a top-level domain such as .com or .uk), or the numeric
      Internet Protocol (IP) address of a host.
      <!-- TODO: The fully qualified domain name is preferred; use of numeric IP
      addresses is strongly discouraged.--></t>

      <t>The terms request-host and request-URI refer to the values the client
      would send to the server as, respectively, the host (but not port) and
      abs_path portions of the absoluteURI (http_URL) of the HTTP request line.
      Note that request-host must be a FQHN.  Hosts names can be specified
      either as an IP address or a FQHN string.  Sometimes we compare one host
      name with another.  Host A's name domain-matches host B's if
      <list style="symbols">
        <t>both host names are IP addresses and their host name strings match
        exactly; or</t>

        <t>both host names are FQDN strings and their host name strings match
        exactly; or</t>

        <t>A is a FQDN string and has the form NB, where N is a non-empty name
        string, B has the form .B, and B is a FQDN string.  (So, x.y.com
        domain-matches .y.com but not y.com.)</t>
      </list>
      </t>

      <t>Note that domain-match is not a commutative operation: a.b.c.com
      domain-matches .c.com, but not the reverse.</t>

      <t>Because it was used in Netscape's original implementation of state
      management, we will use the term cookie to refer to the state information
      that passes between an origin server and user agent, and that gets stored
      by the user agent.</t>
    </section>
    <section title="State and Sessions">
      <t>This document describes a way to create stateful sessions with HTTP
      requests and responses.  HTTP servers respond to each client request
      without relating that request to previous or subsequent requests; the
      technique allows clients and servers that wish to exchange state
      information to place HTTP requests and responses within a larger context,
      which we term a &quot;session&quot;.  This context might be used to
      create, for example, a &quot;shopping cart&quot;, in which user
      selections can be aggregated before purchase, or a magazine browsing
      system, in which a user's previous reading affects which offerings are
      presented.</t>

      <t>There are, of course, many different potential contexts and thus many
      different potential types of session.  The designers' paradigm for
      sessions created by the exchange of cookies has these key attributes:
      <list style="numbers">
        <t>Each session has a beginning and an end.</t>

        <t>Each session is relatively short-lived.</t>

        <t>Either the user agent or the origin server may terminate a
        session.</t>

        <t>The session is implicit in the exchange of state information.</t>
      </list>
      </t>
    </section>
    <section title="Outline">
      <t>We outline here a way for an origin server to send state information to
      the user agent, and for the user agent to return the state information to
      the origin server.</t>

      <section title="Syntax: General">
        <t>The two state management headers, Set-Cookie and Cookie, have common
        syntactic properties involving attribute-value pairs.  The following
        grammar uses the notation, and tokens DIGIT (decimal digits) and token
        (informally, a sequence of non-special, non-white space characters) from
        the HTTP/1.1 specification [RFC 2068] to describe their syntax.</t>

        <t>TODO: Test this grammar.</t>

        <figure>
          <artwork>
   av-pairs        =       av-pair *(&quot;;&quot; av-pair)
   av-pair         =       attr [&quot;=&quot; value]        ; optional value
   attr            =       token
   value           =       word
   word            =       token | quoted-string
          </artwork>
        </figure>

        <t>Attributes (names) (attr) are case-insensitive.  White space is
        permitted between tokens.  Note that while the above syntax description
        shows value as optional, most attrs require them.</t>

        <t>NOTE: The syntax above allows whitespace between the attribute and
        the = sign.</t>
      </section>

    </section>
  </middle>
  <back>
    <section title="Acknowledgements">
      <t>This document borrows heavily from RFC 2109.  TODO: Figure out the
      proper way to credit the authors of RFC 2109.</t>
    </section>
  </back>
</rfc>
