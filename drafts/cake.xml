<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt"?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<!--<!DOCTYPE rfc SYSTEM "rfc2629.dtd">-->
<rfc ipr="trust200902" docName="draft-abarth-cake-00" category="std">
  <front>
    <title abbrev="Simple HTTP State Management Mechanism">
      Simple HTTP State Management Mechanism
    </title>
    <author initials="A." surname="Barth" fullname="Adam Barth">
      <organization abbrev="Google, Inc.">
        Google, Inc.
      </organization>
      <address>
        <email>ietf@adambarth.com</email>
        <uri>http://www.adambarth.com/</uri>
      </address>
    </author>
    <date month="August" year="2010"/>
    <workgroup>httpstate</workgroup>
    <abstract>
      <t>This document describes a simple HTTP state management mechanism,
      called cake, that lets HTTP servers maintain stateful sessions with
      HTTP user agents.  This mechanism is harmonized with the same-origin
      security model and provides both confidentiality and integrity
      protection against active network attackers.  In addition, the
      mechanism is robust to cross-site request forgery attacks.</t>
    </abstract>
    <note title="Editorial Note (To be removed by RFC Editor)">
      <t>If you have suggestions for improving this document, please send
      email to <eref target="mailto:http-state@ietf.org"/>.  Further Working
      Group information is available from <eref
      target="https://tools.ietf.org/wg/httpstate/"/>.</t>
    </note>
  </front>
  <middle>
    <section anchor="intro" title="Introduction">
      <t>HTTP does not provide servers with a robust mechanism for tracking
      state between requests.  The dominant HTTP state management mechanism
      in use on the Internet, known as cookies, has a number of historical
      infelicities that impair its security.  In particular, cookies have
      the following serious defects:
      <list style="numbers">
        <t>Cookies provide no integrity protection against active network
        attackers.  Even if the example.com HTTP server always employs TLS,
        a network attacker manipulate the server's cookies by spoofing
        responses from http://example.com/ (assuming the user agent makes a
        single non-TLS protected HTTP request, which, of course, the
        attacker can redirect to http://example.com/).</t>

        <t>Cookies assume that a given host name trusts all of its
        superdomains and siblings.  In particular, students.example.edu can
        manipulate the cookies used by grades.example.edu, potentially
        resulting in security vulnerabilities.</t>

        <t>Cookies indicate only which user agent issued a given HTTP
        request.  They provide no information about why the user agent
        issued that request.  This design flaw leads many HTTP servers to be
        vulnerable to cross-site request forgery attacks, in which the
        attacker tricks the server into performing an action on behalf of
        the user by causing the user agent to issue an HTTP request to the
        server with the user's cookies.</t>
      </list>
      </t>

      <t>This document defines a simple HTTP state management mechanism that
      addresses these shortcommings of cookies.  In this mechanism, the
      server stores a secret key at the user agent, called the cake-key.
      When the user agent issues subsequent HTTP requests to the server, the
      user agent sends a string, called a cake, containing a HMAC (using the
      cake-key) of the security-origin that generated the request.  By
      whitelisting expected cakes, the server can accept requests from
      origins of its choice, mitigating cross-site request forgery
      vulnerabilities.</t>

      <t>Unlike cookies, which can leak from one host to another and from
      one scheme to another, the cake-key is scoped to a security-origin.
      In particular, http://students.example.edu and
      http://grades.example.edu have independent cake-keys.  Likewise,
      http://example.com and https://example.com have independent cake-keys.
      Therefore, an active network attacker (who can compromise
      http://example.com) cannot manipulate the state for
      https://example.com.</t>
    </section>
    <section anchor="conventions" title="Conventions">
      <section anchor="conformance-criteria" title="Conformance Criteria">
        <t>The keywords "MUST", "MUST NOT", "REQUIRED", "SHOULD", "SHOULD
        NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be
        interpreted as described in <xref target="RFC2119"/>.</t>

        <t>Requirements phrased in the imperative as part of algorithms (such
        as "strip any leading space characters" or "return false and abort
        these steps") are to be interpreted with the meaning of the key word
        ("MUST", "SHOULD", "MAY", etc) used in introducing the algorithm.</t>

        <t>Conformance requirements phrased as algorithms or specific steps can
        be implemented in any manner, so long as the end result is equivalent.
        In particular, the algorithms defined in this specification are
        intended to be easy to understand and are not intended to be
        performant.</t>
      </section>
      <section anchor="syntax-notation" title="Syntax Notation">
        <t>This specification uses the Augmented Backus-Naur Form (ABNF)
        notation of <xref target="RFC5234"/>.</t>

        <t>The following core rules are included by reference, as defined in
        <xref target="RFC5234"/>, Appendix B.1: ALPHA (letters), CR (carriage
        return), CRLF (CR LF), CTL (controls), DIGIT (decimal 0-9), DQUOTE
        (double quote), HEXDIG (hexadecimal 0-9/A-F/a-f), LF (line feed), OCTET
        (any 8-bit sequence of data), SP (space), HTAB (horizontal tab), CHAR
        (any US-ASCII character), VCHAR (any visible US-ASCII character), and
        WSP (whitespace).</t>

        <t>The OWS (optional whitespace) rule is used where zero or more
        linear whitespace characters MAY appear:
        <figure>
          <artwork type="abnf">
OWS            = *( [ obs-fold ] WSP )
                 ; "optional" whitespace
obs-fold       = CRLF
          </artwork>
        </figure>
        OWS SHOULD either not be produced or be produced as a single SP
        character.</t>
      </section>
      <section anchor="terminology" title="Terminology">
        <t>The terms user agent, client, server, proxy, and origin server have
        the same meaning as in the HTTP/1.1 specification (<xref
        target="RFC2616" />, Section 1.3).</t>

        <t>The terms request-host and request-uri refer to the values the user
        agent would send to the server as, respectively, the host (but not
        port) and the absoluteURI (http_URL) of the HTTP Request-Line.</t>

        <t>Two sequences of octets are said to case-insensitively match each
        other if and only if they are equivalent under the i;ascii-casemap
        collation defined in <xref target="RFC4790"/>.</t>
      </section>
    </section>
    <section anchor="overview" title="Overview">
      <t>The cake state management mechanism consists of two HTTP headers, an
      HTTP response header named Set-Cake-Key and an HTTP request header
      named Cake.</t>

      <t>The server can use the Set-Cake-Key response header to store a
      secret key at the user agent.  For example, the following header
      instructs the user agent to store a 128-bit secret key for two weeks:
      <figure>
        <artwork>
          <![CDATA[ 
Set-Cake-Key: 515BYea21GY7xRbZTLCekQ==; Max-Age=1209600
          ]]>
        </artwork>
      </figure>
      Notice that the server can easily generate a base64-encoded random
      number using the openssl library:
      <figure>
        <artwork>
          <![CDATA[ 
$ openssl rand -base64 16
          ]]>
        </artwork>
      </figure>
      </t>

      <t>The user agent then associated the given cake-key with the
      security-origin from which it received the Set-Cake-Key header.  When
      making subsequent HTTP requests to that security-origin, the user
      agent includes the Cake request header, which contains a SHA-1 HMAC
      (keyed by the cake-key) of the security-origin that generated the
      request.  For example, if the request was generated by the user agent
      on behalf of http://example.com, the user agent sends the following
      header:
      <figure>
        <artwork>
          <![CDATA[ 
Cake: Z32dI5wav1Cqj07ToG++DRXV18c=
          ]]>
        </artwork>
      </figure>
      Notice that the server can easily generate the cake it will receive
      for a given security-origins using the openssl library:
      <figure>
        <artwork>
          <![CDATA[ 
$ echo "Origin: http://example.com" |
  openssl dgst -hmac 515BYea21GY7xRbZTLCekQ== -sha1 -binary |
  openssl enc -base64
          ]]>
        </artwork>
      </figure>
      </t>

      <t>By pre-computing the cake for the security-origins the
      server expects to receive requests from, the server can whitelist
      the security-origins that have access to its session state.  Notice
      that if the server does not whitelist a particular security-origin,
      the server will not link the request with the session, making it
      difficult for the attacker to mount a cross-site request forgery
      attack.</t>
    </section>
    <section anchor="server-requirements" title="Server Requirements">
      <t>TODO</t>

      <figure>
        <artwork type="abnf">
          <![CDATA[
set-cake-key-header = "Set-Cake-Key:" OWS set-cake-key-string OWS
set-cake-key-string = cake-key *( ";" SP cake-av )
cake-key            = 1*BASE64CHAR
BASE64CHAR          = ALPHA / DIGIT / "+" / "/" / "="
cake-av             = max-age-av / extension-av
max-age-av          = "Max-Age=" 1*DIGIT
extension-av        = <any CHAR except CTLs or ";">
          ]]>
        </artwork>
      </figure>

      <figure>
        <artwork type="abnf">
          <![CDATA[
cake-header         = "Cake:" OWS cake OWS
cake                = 1*BASE64CHAR
          ]]>
        </artwork>
      </figure>
    </section>
    <section anchor="ua-requirements" title="User Agent Requirements">
      <t>TODO</t>
    </section>
    <section anchor="privacy-considerations"
             title="Privacy Considerations">
        <t>TODO</t>
    </section>
    <section anchor="security-considerations"
             title="Security Considerations">
      <t>TODO</t>
    </section>
    <section title="IANA Considerations" anchor="iana-considerations">
      <t>The permanent message header registry (see <xref target="RFC3864"/>)
      should be updated with the following registrations:</t>

      <section title="Cake">
        <t>Header field name: Cake</t>
        <t>Applicable protocol: http</t>
        <t>Status: standard</t>
        <t>Author/Change controller: IETF</t>
        <t>Specification document: this specification <!-- (<xref target="cake"/>) --></t>
      </section>

      <section title="Set-Cake-Key">
        <t>Header field name: Set-Cake-Key</t>
        <t>Applicable protocol: http</t>
        <t>Status: standard</t>
        <t>Author/Change controller: IETF</t>
        <t>Specification document: this specification <!-- (<xref target="set-cake-key"/>) --></t>
      </section>
    </section>
  </middle>
  <back>
    <references title="Normative References">
      <!-- http://xml.resource.org/public/rfc/bibxml/reference.RFC.XXXX.xml -->
      <reference anchor="RFC2119">
        <front>
          <title abbrev="RFC Key Words">
            Key words for use in RFCs to Indicate Requirement Levels
          </title>
          <author initials="S." surname="Bradner" fullname="Scott Bradner">
            <organization>Harvard University</organization>
            <address>
              <postal>
                <street>1350 Mass. Ave.</street>
                <street>Cambridge</street>
                <street>MA 02138</street>
              </postal>
              <phone>- +1 617 495 3864</phone>
              <email>sob@harvard.edu</email>
            </address>
          </author>
          <date year="1997" month="March"/>
          <area>General</area>
          <keyword>keyword</keyword>
          <abstract>
            <t>In many standards track documents several words are used to
            signify the requirements in the specification. These words are
            often capitalized. This document defines these words as they
            should be interpreted in IETF documents. Authors who follow these
            guidelines should incorporate this phrase near the beginning of
            their document:
            <list>
              <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
              NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and
              "OPTIONAL" in this document are to be interpreted as described
              in RFC 2119.</t>
            </list>
            </t>
            <t>Note that the force of these words is modified by the
            requirement level of the document in which they are used.</t>
          </abstract>
        </front>
        <seriesInfo name="BCP" value="14"/>
        <seriesInfo name="RFC" value="2119"/>
        <format type="TXT" octets="4723"
          target="ftp://ftp.isi.edu/in-notes/rfc2119.txt"/>
        <format type="HTML" octets="17491"
          target="http://xml.resource.org/public/rfc/html/rfc2119.html"/>
        <format type="XML" octets="5777"
          target="http://xml.resource.org/public/rfc/xml/rfc2119.xml"/>
      </reference>
      <reference anchor="RFC2616">
        <front>
          <title>Hypertext Transfer Protocol -- HTTP/1.1</title>
          <author initials="R." surname="Fielding" fullname="R. Fielding">
            <organization>University of California, Irvine</organization>
            <address><email>fielding@ics.uci.edu</email></address>
          </author>
          <author initials="J." surname="Gettys" fullname="J. Gettys">
            <organization>W3C</organization>
            <address><email>jg@w3.org</email></address>
          </author>
          <author initials="J." surname="Mogul" fullname="J. Mogul">
            <organization>Compaq Computer Corporation</organization>
            <address><email>mogul@wrl.dec.com</email></address>
          </author>
          <author initials="H." surname="Frystyk" fullname="H. Frystyk">
            <organization>MIT Laboratory for Computer Science</organization>
            <address><email>frystyk@w3.org</email></address>
          </author>
          <author initials="L." surname="Masinter" fullname="L. Masinter">
            <organization>Xerox Corporation</organization>
            <address><email>masinter@parc.xerox.com</email></address>
          </author>
          <author initials="P." surname="Leach" fullname="P. Leach">
            <organization>Microsoft Corporation</organization>
            <address><email>paulle@microsoft.com</email></address>
          </author>
          <author initials="T." surname="Berners-Lee"
                  fullname="T. Berners-Lee">
            <organization>W3C</organization>
            <address><email>timbl@w3.org</email></address>
          </author>
          <date month="June" year="1999"/>
        </front>
        <seriesInfo name="RFC" value="2616"/>
      </reference>
      <reference anchor="RFC4790">
        <front>
          <title>Internet Application Protocol Collation Registry</title>
          <author initials="C." surname="Newman" fullname="C. Newman">
            <organization />
          </author>
          <author initials="M." surname="Duerst" fullname="M. Duerst">
            <organization />
          </author>
          <author initials="A." surname="Gulbrandsen"
                  fullname="A. Gulbrandsen">
            <organization />
          </author> 
          <date year="2007" month="March" /> 
          <abstract> 
            <t>Many Internet application protocols include string-based
            lookup, searching, or sorting operations. However, the problem
            space for searching and sorting international strings is large,
            not fully explored, and is outside the area of expertise for the
            Internet Engineering Task Force (IETF). Rather than attempt to
            solve such a large problem, this specification creates an
            abstraction framework so that application protocols can precisely
            identify a comparison function, and the repertoire of comparison
            functions can be extended in the future.</t>
          </abstract>
        </front> 
        <seriesInfo name="RFC" value="4790" /> 
        <format type="TXT" octets="55591"
                target="http://www.rfc-editor.org/rfc/rfc4790.txt" /> 
      </reference>
      <reference anchor="RFC5234">
        <front>
          <title abbrev="ABNF for Syntax Specifications">
            Augmented BNF for Syntax Specifications: ABNF
          </title>
          <author initials="D." surname="Crocker"
                  fullname="Dave Crocker" role="editor">
            <organization>Brandenburg InternetWorking</organization>
            <address>
              <email>dcrocker@bbiw.net</email>
            </address>  
          </author>
          <author initials="P." surname="Overell" fullname="Paul Overell">
            <organization>THUS plc.</organization>
            <address>
              <email>paul.overell@thus.net</email>
            </address>
          </author>
          <date month="January" year="2008"/>
        </front>
        <seriesInfo name="STD" value="68"/>
        <seriesInfo name="RFC" value="5234"/>
      </reference>
      <!--
      <reference anchor="RFC1034"> 
        <front> 
          <title abbrev="Domain Concepts and Facilities">Domain names - concepts
            and facilities</title> 
          <author initials="P." surname="Mockapetris" fullname="P. Mockapetris"> 
            <organization>Information Sciences Institute (ISI)</organization>
          </author> 
          <date year="1987" day="1" month="November" />
        </front> 
        <seriesInfo name="STD" value="13" /> 
        <seriesInfo name="RFC" value="1034" /> 
        <format type="TXT" octets="129180" target="http://www.rfc-editor.org/rfc/rfc1034.txt" /> 
      </reference> 
      <reference anchor="RFC3490"> 
        <front> 
          <title>Internationalizing Domain Names in Applications (IDNA)</title> 
            <author initials="P." surname="Faltstrom" fullname="P. Faltstrom">
              <organization />
            </author> 
            <author initials="P." surname="Hoffman" fullname="P. Hoffman"> 
              <organization />
            </author> 
            <author initials="A." surname="Costello" fullname="A. Costello"> 
              <organization />
            </author> 
            <date year="2003" month="March" /> 
            <abstract> 
              <t>Until now, there has been no standard method for domain names
              to use characters outside the ASCII repertoire.  This document
              defines internationalized domain names (IDNs) and a mechanism
              called Internationalizing Domain Names in Applications (IDNA) for
              handling them in a standard fashion.  IDNs use characters drawn
              from a large repertoire (Unicode), but IDNA allows the non-ASCII
              characters to be represented using only the ASCII characters
              already allowed in so-called host names today.  This
              backward-compatible representation is required in existing
              protocols like DNS, so that IDNs can be introduced with no
              changes to the existing infrastructure.  IDNA is only meant for
              processing domain names, not free text. [STANDARDS TRACK]</t>
            </abstract>
          </front> 
          <seriesInfo name="RFC" value="3490" /> 
        <format type="TXT" octets="51943" target="http://www.rfc-editor.org/rfc/rfc3490.txt" /> 
      </reference> 
      <reference anchor="RFC3492"> 
        <front> 
          <title>Punycode: A Bootstring encoding of Unicode for
          Internationalized Domain Names in Applications (IDNA)</title>
        <author initials="A." surname="Costello" fullname="A. Costello"> 
          <organization />
        </author> 
        <date year="2003" month="March" /> 
        <abstract> 
          <t>Punycode is a simple and efficient transfer encoding syntax
          designed for use with Internationalized Domain Names in Applications
          (IDNA). It uniquely and reversibly transforms a Unicode string into
          an ASCII string. ASCII characters in the Unicode string are
          represented literally, and non-ASCII characters are represented by
          ASCII characters that are allowed in host name labels (letters,
          digits, and hyphens). This document defines a general algorithm
          called Bootstring that allows a string of basic code points to
          uniquely represent any string of code points drawn from a larger
          set. Punycode is an instance of Bootstring that uses particular
          parameter values specified by this document, appropriate for
          IDNA.</t>
        </abstract>
      </front> 
      <seriesInfo name="RFC" value="3492" /> 
      <format type="TXT" octets="67439"
              target="ftp://ftp.isi.edu/in-notes/rfc3492.txt" /> 
      </reference> 
      <reference anchor="RFC3629">
        <front>
          <title>UTF-8, a transformation format of ISO 10646</title>
          <author initials="F." surname="Yergeau" fullname="F. Yergeau">
            <organization />
          </author>
          <date year="2003" month="November" />
          <abstract>
            <t>ISO/IEC 10646-1 defines a large character set called the
            Universal Character Set (UCS) which encompasses most of the
            world's writing systems. The originally proposed encodings of
            the UCS, however, were not compatible with many current
            applications and protocols, and this has led to the development
            of UTF-8, the object of this memo. UTF-8 has the characteristic
            of preserving the full US-ASCII range, providing compatibility
            with file systems, parsers and other software that rely on
            US-ASCII values but are transparent to other values. This memo
            obsoletes and replaces RFC 2279.</t>
          </abstract>
        </front>
        <seriesInfo name="STD" value="63" />
        <seriesInfo name="RFC" value="3629" />
        <format type="TXT" octets="33856"
                target="ftp://ftp.rfc-editor.org/in-notes/rfc3629.txt" />
      </reference>
      <reference anchor="RFC5246"> 
        <front> 
          <title>
            The Transport Layer Security (TLS) Protocol Version 1.2
          </title> 
          <author initials="T." surname="Dierks" fullname="T. Dierks"> 
            <organization />
          </author> 
          <author initials="E." surname="Rescorla" fullname="E. Rescorla"> 
            <organization />
          </author> 
          <date year="2008" month="August" />
        </front>
        <seriesInfo name="RFC" value="5246" />
      </reference>
      -->
    </references>
    <references title="Informative References">
      <reference anchor="RFC3864">
        <front>
          <title>Registration Procedures for Message Header Fields</title>
          <author initials="G." surname="Klyne" fullname="G. Klyne"/>
          <author initials="M." surname="Nottingham" fullname="M. Nottingham"/>
          <author initials="J." surname="Mogul" fullname="J. Mogul"/>
          <date year="2004" month="September" />
        </front>
        <seriesInfo name="BCP" value="90" />
        <seriesInfo name="RFC" value="3864" />
      </reference>
      <!--
      <reference anchor="RFC2109">
        <front>
          <title>HTTP State Management Mechanism</title>
          <author initials="D.M." surname="Kristol"
                  fullname="David M. Kristol">
            <organization>Bell Laboratories, Lucent
            Technologies</organization>
            <address><email>dmk@bell-labs.com</email></address>
          </author>
          <author initials="L." surname="Montulli" fullname="Lou Montulli">
            <organization>Netscape Communications Corp.</organization>
            <address><email>montulli@netscape.com</email></address>
          </author>
          <date year="1997" month="February" />
        </front>
        <seriesInfo name="RFC" value="2109" />
      </reference>
      <reference anchor="RFC2965">
        <front>
          <title>HTTP State Management Mechanism</title>
          <author initials="D. M." surname="Kristol"
                  fullname="David M. Kristol">
            <organization>Bell Laboratories, Lucent
            Technologies</organization>
            <address><email>dmk@bell-labs.com</email></address>
          </author>
          <author initials="L." surname="Montulli" fullname="Lou Montulli">
            <organization>Epinions.com, Inc.</organization>
            <address><email>lou@montulli.org</email></address></author>
          <date year="2000" month="October" />
         </front>
          <seriesInfo name="RFC" value="2965" />
      </reference>
      <reference anchor="RFC2818">
        <front>
          <title>HTTP Over TLS</title>
          <author initials="E." surname="Rescorla" fullname="E. Rescorla">
            <organization />
          </author>
          <date year="2000" month="May" />
          <abstract>
            <t>This memo describes how to use Transport Layer Security (TLS)
            to secure Hypertext Transfer Protocol (HTTP) connections over the
            Internet. This memo provides information for the Internet
            community.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="2818" />
        <format type="TXT" octets="15170"
                target="http://www.rfc-editor.org/rfc/rfc2818.txt" />
      </reference>
      <reference anchor="Netscape">
        <front>
          <title>Persistent Client State - HTTP Cookies</title>
          <author fullname="Netscape Communications Corp.">
            <organization/>
          </author>
          <date/>
        </front>
      </reference>
      <reference anchor="Kri2001" target="http://arxiv.org/abs/cs.SE/0105018">
        <front>
          <title>HTTP Cookies: Standards, Privacy, and Politics</title>
          <author initials="D." surname="Kristol"
                  fullname="David M. Kristol"/>
          <date year="2001" month="November"/>
        </front>
        <seriesInfo name="ACM Transactions on Internet Technology"
                    value="Vol. 1, #2"/>
      </reference>
      -->
    </references>
    <section title="Acknowledgements">
      <t>TODO</t>
    </section>
  </back>
</rfc>
