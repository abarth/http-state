# Automatically extracted from rfc2629xslt.xml. DO NOT EDIT!

# WORK IN PROGRESS! PLEASE REPORT PROBLEMS TO THE AUTHOR.

# Define our extension namespace
namespace x = "http://purl.org/net/xml2rfc/ext"

# Define GRDDL namespace
namespace grddl = "http://www.w3.org/2003/g/data-view#"

# Define RDF namespace
namespace rdf = "http://www.w3.org/1999/02/22-rdf-syntax-ns#"

# Include rfc2629bis RNC grammar
include "rfc2629.rnc" {
  
  # Redefine <artwork> to allow markup
  artwork =
    element artwork {
      attlist.artwork,
      (TEXT
        | eref 
        | iref 
        | spanx 
        | xref
        | x_abnf-char-sequence
        | x_bb
        | x_bc
        | x_bt
        | x_highlight
        | x_length-of
        | x_parse-xml
        | x_ref
        | x_span
        | x_x)* 
    }

  # Redefine <back> to allow boilerplate
  back =
    element back {
      attlist.back,
      references*,
      section*,
      x_boilerplate?
    }

  # Redefine <c> to allow our extension elements
  c =
    element c {
      attlist.c,
      (TEXT
        | xref
        | eref 
        | iref 
        | cref 
        | spanx 
        | x_ref)*
    }

  # Redefine <cref> to allow more child elements
  cref =
    element cref {
      attlist.cref,
      (TEXT
        | eref
        | xref)*
    }

  # Redefine <front> to allow boilerplate
  front =
    element front {
      attlist.front,
      title,
      author+,
      date,
      area*,
      workgroup*,
      keyword*,
      x_boilerplate?,
      abstract?,
      note*
    }
  
  # Redefine <list> element to allow <x:lt> child elements
  \list =
    element list {
      attlist.list,
      (t+ | x_lt+)
    }    
    
  # Redefine <preamble> to allow our extension elements
  preamble =
    element preamble {
      attlist.preamble,
      (TEXT
        | xref
        | eref
        | iref
        | cref
        | spanx
        | x_anchor-alias)*
    }

  # Redefine <postamble> to allow our extension elements
  postamble =
    element postamble {
      attlist.postamble,
      (TEXT
        | xref
        | eref
        | iref
        | cref
        | spanx
        | x_bcp14)*
    }

  # Redefine <reference> to allow our extension elements
  reference =
    element reference {
      attlist.reference,
      front,
      seriesInfo*,
      format*,
      annotation*,
      x_source?
    }

  # Redefine <rfc> to allow our extension elements
  rfc =
    element rfc {
      attlist.rfc,
      x_link*,
      x_assign-section-number*,
      front,
      middle,
      back?
    }

  # Redefine <section> to allow our extension elements
  section =
    element section {
      attlist.section,
      (t
       | figure
       | texttable
       | iref
       | section
       | x_anchor-alias
       | x_blockquote
       | x_include-author
       | x_note
       | rdf_Description)*
    }

  # Redefine <spanx> to allow some markup
  spanx =
    element spanx {
      attlist.spanx,
      (TEXT
        | iref
        | xref
        | x_ref)*
    }

  # Redefine <t> to allow our extension elements
  t =
    element t {
      attlist.t,
      (TEXT
       | \list
       | figure
       | xref
       | eref
       | iref
       | cref
       | spanx
       | vspace
       | x_abnf-char-sequence
       | x_anchor-alias
       | x_bcp14
       | x_dfn
       | x_h
       | x_q
       | x_ref
       | x_sup)*
    }
}

# Allow x:indent-with attribute on <artwork>
attlist.artwork &=
  attribute x:indent-with { ATEXT }?

# Allow anchor attribute on <author>
attlist.author &=
  attribute anchor { xsd:ID }?
  
  # Extend attribute set for <iref> (see Section 10.22)
attlist.iref &=
  attribute x:for-anchor { ATEXT }?

# Extend attribute set for <list> (see Section 10.23)
attlist.list &=
  attribute x:indent { ATEXT }?

# Extend attribute set for <preamble>
attlist.preamble &=
  attribute anchor { xsd:ID }?

# Extend attribute set for <rfc>
attlist.rfc &=
  attribute grddl:transformation { ATEXT }?,
  attribute x:maturity-level { "proposed" | "draft" | "internet" }?

# Extend attribute set for <section> (see Section 10.25)
attlist.section &=
  attribute x:fixed-section-number { ATEXT }?

# Allow anchor attribute on <spanx>
attlist.spanx &=
  attribute anchor { xsd:ID }?

# Extend attribute set for <xref> (see Section 10.26)
attlist.xref &=
  attribute x:fmt  { "()" | "," | "anchor" | "of" | "number" | "sec" |
                     "none" }?,
  attribute x:rel  { ATEXT }?,
  attribute x:sec  { ATEXT }?

# Conversion to ABNF char sequence (see Section 10.1)
x_abnf-char-sequence =
  element x:abnf-char-sequence {
    TEXT
  }

# Aliasing of anchors (see Section 10.2)
x_anchor-alias =
  element x:anchor-alias {
    attribute value { TEXT },
    empty
  }

# Including Author information
# (experimental)
x_include-author =
  element x:include-author {
    attribute target { xsd:IDREF }
  }

# Setting section numbers for internally generated sections
# (experimental)
x_assign-section-number =
  element x:assign-section-number {
    attribute builtin-target { "authors" },
    attribute number { TEXT },
    empty
  }

# Bottom line of box drawing (see Section 10.4)
x_bb =
  element x:bb {
    (TEXT
      | iref
      | xref
      | x_bb
      | x_bc
      | x_bt
      | x_ref)* 
  }

# Center line of box drawing (see Section 10.5)
x_bc =
  element x:bc {
    (TEXT
      | iref
      | xref
      | x_bb
      | x_bc
      | x_bt
      | x_ref)* 
  }

# BCP14/RFC2119 keywords (see Section 10.3)
x_bcp14 =
  element x:bcp14 {
    "MAY"
    | "MUST"
    | "MUST NOT"
    | "NOT RECOMMENDED"
    | "OPTIONAL"
    | "RECOMMENDED"
    | "REQUIRED"
    | "SHALL"
    | "SHALL NOT"
    | "SHOULD"
    | "SHOULD NOT"
  }
  
# Blockquote (see Section 10.6)
x_blockquote =
  element x:blockquote {
    attribute cite { URI }?,
    t+
  }

# Boilerplate (see Section 10.6) 
x_boilerplate =
  element x:boilerplate {
    section+
  }

# Top line of box drawing (see Section 10.8)
x_bt =
  element x:bt {
    (TEXT
      | iref
      | xref
      | x_bb
      | x_bc
      | x_bt
      | x_ref)* 
  }

# Definition (see Section 10.9)
x_dfn =
  element x:dfn {
    attribute anchor { xsd:ID }?,
    (TEXT
      | iref)*
  }
  
# Heading (see Section 10.10)
x_h =
  element x:h {
    TEXT
  }

# Heading (see Section 10.11)
x_highlight =
  element x:highlight {
    TEXT
  }

# Length Measurement (see Section 10.12)
x_length-of =
  element x:length-of {
    attribute indented { NUMBER }?,
    attribute target { xsd:IDREF },
    empty
  }

# Link (see Section 10.13)
x_link =
  element x:link {
    attribute href { URI },
    attribute title { TEXT }?,
    attribute rel { TEXT },
    empty
  }
  
# Extended list item (see Section 10.14)
x_lt =
  element x:lt {
    attribute anchor { xsd:ID }?,
    attribute hangText { TEXT }?,
    t+
  }

# Note (see Section 10.15)
x_note =
  element x:note {
    t+
  }

# Signal XML content (see Section 10.16)
x_parse-xml =
  element x:parse-xml {
    TEXT
  }

# Inline quote (see Section 10.17)
x_q =
  element x:q {
    TEXT
  }

# Anchor reference (see Section 10.18)  
x_ref =
  element x:ref {
    attribute anchor { xsd:ID }?,
    TEXT
  }

# source information (see Section 10.19)  
x_source =
  element x:source {
    attribute basename { ATEXT }?,
    attribute href { URI },
    empty
  }

# superscript (see Section 10.20)
x_sup =
  element x:sup {
    TEXT
  }

# Inline Span 
x_span =
  element x:span {
    attribute anchor { xsd:ID }?,
    (TEXT
      | x_parse-xml)* 
  }

# Nop (for alignment in source)
x_x =
  element x:x {
    empty
  }

# Embed RDF statements 
rdf_Description =
  element rdf:Description {
    rdf_content
  }
  
rdf_content =
  ( TEXT | element * { rdf_content })*
